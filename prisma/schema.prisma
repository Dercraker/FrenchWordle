generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}


model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // For the Credentials provider
  passwordHash String?

  // Resend email
  resendContactId String?

  sessions  Session[]
  accounts  Account[]
  Score Score[]
  Party Party[]
}

model Word {
  id String @id @unique @default(cuid())
  word String @unique
  WordOfTheDay WordOfTheDay[]
  Party Party[]
}

model WordOfTheDay {
  id String @id @unique @default(cuid())
  date DateTime @default(now())
  word Word @relation(fields: [wordId], references: [id])
  parties Party[]
  wordId String
}

model Score {
  id String @id @unique @default(cuid())
  date DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  party Party @relation(fields: [partyId], references: [id], onDelete: Cascade)
  result ScoreState @default(idle)
  userId String
  partyId String @unique
}

model Party {
  id String @id @unique @default(cuid())
  playDate DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  connectedParty Boolean @default(false)
  wordOfTheDay WordOfTheDay? @relation(fields: [wordOfTheDayId], references: [id])
  word Word? @relation(fields: [wordId], references: [id])
  lines Line[]
  score Score?
  userId String
  wordOfTheDayId String?
  wordId String?
}

model Line {
  id String @id @unique @default(cuid())
  lineNumber Int
  characters Charactere[]
  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId String?
}

model Charactere {
  id String @id @unique @default(cuid())
  line Line @relation(fields: [lineId], references: [id], onDelete: Cascade)
  letter String
  state characterState
  lineId String
}

enum characterState {
  idle
  correct
  present
  absent
}

enum ScoreState {
  idle
  playing
  win
  lose
}
